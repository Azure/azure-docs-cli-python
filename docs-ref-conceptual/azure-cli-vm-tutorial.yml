### YamlMime:Tutorial
title: Create virtual machines with the Azure CLI 2.0
metadata:
    title: Create virtual machines with the Azure CLI 2.0
    description: Get started with the Azure CLI by creating virtual machines.
    audience: IT Pro
    level: Beginner
    displayType: two-column
    interactive: azurecli
items:
    - durationInMinutes: 1
      content: |-
        In this tutorial, you learn all of the steps involved in setting up a virtual machine with the Azure CLI 2.0.
        This tutorial also covers querying CLI outputs to extract information, and how to re-use secondary resources
        created as part of this initial VM setup.

        You can use the interactive experience offered as part of this tutorial, or [install the CLI](install-azure-cli.md)
        locally.

    - durationInMinutes: 1
      title: Log in
      content: |-
        If you're using a local install of the CLI, you need to log in before perofrming
        any other steps. If you're using the interactive experience through cloud shell,
        you've already been logged in.

        ```azurecli
        az login
        ```

        Follow the steps displayed in your terminal to complete the log in process.

    - durationInMinutes: 1
      title: Create a resource group
      content: |-
        In Azure, resources are allocated in a resource management group to allow them
        to link together. For this tutorial all of the created resources will go into a
        single group.

        ```azurecli
        az group create --name CLITutorial --location eastus
        ```

        > [!NOTE]
        > If you change the location of this resource group, some resources in this
        > tutorial may not be able to be created due to datacenter availability.

    - durationInMinutes: 4
      title: Create a virtual machine
      content: |-
        Virtual machines in Azure have a large number of
        dependencies. Fortunately, the CLI creates these resources for you
        based on the command line arguments you specify. In this step you'll 
        create a virtual machine, and then get information on created
        resources with `--query`.

        Start by creating a single new virtual machine running Ubuntu which uses SSH authentication for login.

        ```azurecli
        az vm create --verbose --resource-group CLITutorial --name TutorialVM1 --image UbuntuLTS --generate-ssh-keys
        ```

        > [!NOTE]
        > If you have an SSH key named `id_rsa` already available, this key is used for authentication rather than having a new
        > key generated.

        As the VM is created, you see the local values used and Azure resources being created due to the `--verbose` option.
        Once the VM is ready, JSON is returned from the Azure service including the public IP address.

        ```output
        {
          "fqdns": "",
          "id": ...,
          "location": "eastus",
          "macAddress": ...,
          "powerState": "VM running",
          "privateIpAddress": ...,
          "publicIpAddress": <PUBLIC_IP_ADDRESS>,
          "resourceGroup": "CLITutorial",
          "zones": ""
        }
        ```
       
        Try connecting to the VM over SSH to make sure that it is up and running.

        ```bash
        ssh <PUBLIC_IP_ADDRESS>
        ```

        Go ahead and log out from the VM. There are other ways to get this IP address after the VM has started. You can also get other information about the VM itself -
        what virtual network it's on, if it has assigned FQDNs, and whether or not it is powered on. You'll now learn how to use the
        `--query` command to get that information, and combine it with command-line tools to extract and save values as shell variables.

    - durationInMinutes: 3
      title: Get VM information with queries
      content: |-
        Now that a VM has been created, detailed information about it can be retrieved. The common command for getting information from a resource is
        `show`.

        ```azurecli
        az vm show --name TutorialVM1 --resource-group CLITutorial
        ```

        You'll see a lot of information, which can be difficult to parse visually. The data returned
        contains details on how to authenticate with the VM, network interfaces it connects to, and the storage that it uses. Most importantly,
        it contains the Azure object IDs for resources that the VM is connected to. Object IDs will allow querying these objects directly,
        to get more specific information about the VM's interfaces and capabilities.

        Since it can be used to get information about how to connect to the VM, start with getting the NIC object ID.

        ```azurecli
        az vm show --name TutorialVM1 --resource-group CLITutorial --query 'networkProfile.networkInterfaces[].id' --output tsv
        ```

        There's a lot going on here, just by adding the query. Each part of it references keys in the returned JSON,
        and operations used to process the data.

        * `networkProfile` is a key of the toplevel JSON, which has `networkInterfaces` as a subkey. If a JSON value is a dictionary,
          its keys are refernced from the parent key with the `.` seperator.
        * The `networkInterfaces` value is an array, so it is flattened with the `[]` operator. This operator runs the remainder
          of the query on each array element. In this case, it gets the `id` value of every array element. Flattening an array changes
          the return type from a single value to a JSON array.

        The output format `tsv` (tab-separated values) is guaranteed to only include the data queried, and whitespace consisting of tabs and newlines.
        In this case, since we are requesting only one value, there is one value per line in the output. Since no NICs were named during creation of the VM,
        only a single one was provided and it is safe to assign this value directly to an environment variable.

        Go ahead and assign the NIC object ID to an environment variable now.

        ```bash
        NIC_ID=$(az vm show -n TutorialVM1 -g CLITutorial --query 'networkProfile.networkInterfaces[].id' -o tsv)
        ```

        This example also demonstrates the use of short arguments, which are available for some of the most common arguments passed to
        the CLI.

    - durationInMinutes: 4
      title: Set environment variables from CLI output
      content: |-
        Now that you have the NIC ID, run `az network nic show` to get the information on the NIC itself.

        ```azurecli
        az network nic show --ids $NIC_ID -g CLITutorial
        ```

        This displays a lot of information applicable to the network interface of the VM - DNS settings, IP information, security settings, MAC address, and so on. Right now
        the goal is to obtain the public IP address and the name of the subnet. This information can be pulled with a query.

        ```azurecli
        az network nic show --ids $NIC_ID -g CLITutorial --query '{IP:ipConfigurations[].publicIpAddress.id, Subnet:ipConfigurations[].subnet.id}'
        ```

        This displays a JSON object which has custom identifiers ('IP' and 'Subnet') for the extracted values. While this might not be useful
        for command-line tools, it helps with human readability and you can take this JSON and pipe it to your own tooling.

        Rather than create a new tool, for now take this output and rather than re-tag it, output it as `tsv`. This can be processed by
        the shell `read` command to load results into multiple variables. Since two values on separate lines are displayed, the `read` command
        delimiter must be set to the empty string.

        ```bash
        read -d '' IP_ID SUBNET_ID <<< $(az network nic show --ids $NIC_ID -g CLITutorial --query '[ipConfigurations[].publicIpAddress.id, ipConfigurations[].subnet.id]' -o tsv)
        ```

        You won't use the subnet ID right away, but since it can be obtained in this single query, it's useful to store it for later. Instead what we will
        now do is use the public IP object ID to look up the public IP address and store it in a shell variable.

        ```bash
        VM1_IP_ADDR=$(az network public-ip show --ids $IP_ID -g CLITutorial --query ipAddress -o tsv)
        ```

        Now you have the IP address of the VM. Go ahead and check that it is the same value that you used to initially connect to the VM as part of the result from the `az vm create` command.
        The next step is to create a second VM on the same subnet, to avoid additional resource creation and make it easier to create a desired network topology in the future.

    - durationInMinutes: 2
      title: Creating a new VM on the existing subnet
      content: |-
        Your second VM will use the existing subnet. You can also skip a few steps to get the public IP address of the new VM stored into an environment
        variable right away, since it's returned in the VM creation information.

        ```bash
        VM2_IP_ADDR=$(az vm create --resource-group CLITutorial --name TutorialVM2 --image UbuntuLTS --generate-ssh-keys --subnet $SUBNET_ID --query publicIpAddress -o tsv)
        ```

        With its IP address stored, SSH into this newly-created VM.

        ```bash
        ssh $VM2_IP_ADDR
        ```

        Go ahead and log out from the VM.

    - durationInMinutes: 2
      title: Cleanup
      content: |-
        Now that the tutorial is complete, it's time to clean up the created resources. While you
        can delete individual resources with the `delete` command in their group, the fastest way to remove all resources
        that have been put together into the same resource group is with `group delete`.

        ```azurecli
        az group delete --name CLITutorial --no-wait
        ```

        This command deletes the resources created during the tutorial, and is guaranteed to deallocate
        them in the correct order. The `--no-wait` parameter keeps the CLI from blocking while the
        deletion takes place. If you decide to wait until the deletion is complete, or want to watch it progress,
        you use the `group wait` command.

        ```azurecli
        az group wait --name CLITutorial --deleted
        ```

        With cleanup completed, the tutorial is finished. Continue on for a summary of everything
        you learned and links to resources that will help you with your next steps.

    - durationInMinutes: 1
      title: Summary
      content: |-
        Congratluations! You learned how to create VMs, use the `--query` and `--output` arguments to capture data to be stored in shell variables, and
        looked at some of the resources that get created for Azure VMs.

        Where you go from here depends on what you plan to use the CLI for. We offer
        a variety of materials that go further in depth on the fatures covered in
        this tutorial.

        ### Samples

        If you want to get started right away doing specific simple tasks, we offer a number of sample scripts.

        * Working with [Linux VMs](/azure/virtual-machines/linux/cli-samples?toc=%2fcli%2fazure%2ftoc.json) and [Windows VMs](/azure/virtual-machines/windows/cli-samples?toc=%2fcli%2fazure%2ftoc.json)
        * Working with [webapps](/azure/app-service/app-service-cli-samples?toc=%2Fcli%2Fazure%2Ftoc.json) and [Azure Functions](/azure/azure-functions/functions-cli-samples?toc=%2fcli%2fazure%2ftoc.json)
        * Working with databases - [Azure SQL databases](/azure/sql-database/sql-database-cli-samples?toc=%2fcli%2fazure%2ftoc.json), [PostgreSQL](/azure/postgresql/sample-scripts-azure-cli?toc=%2fcli%2fazure%2ftoc.json), [MySQL](/azure/mysql/sample-scripts-azure-cli?toc=%2fcli%2fazure%2ftoc.json), and [CosmosDB](/azure/cosmos-db/cli-samples?toc=%2fcli%2fazure%2ftoc.json).

        ### In-depth CLI documentation

        There are also topics that go deeper into the CLI features that were shown in the tutorial.

        * Learn more about [output formats](format-output-azure-cli.md)
        * Learn more about [output queries](query-azure-cli.md)
        * Learn more about [login and authorization](authenticate-azure-cli.md)

        ### Other useful documentation

        You might want to take time to explore more advanced features of the CLI, like [configuring defaults](azure-cli-configuration.md) or [extensions](azure-cli-extensions.md).

        We hope that you have an enjoyable and useful experience with the Azure CLI!
