### YamlMime:Tutorial
title: Create virtual machines with the Azure CLI 2.0
metadata:
    title: Create virtual machines with the Azure CLI 2.0
    description: Get started with the Azure CLI by creating virtual machines.
    audience: Developer
    level: Beginner
    displayType: two-column
    interactive: azurecli
items:
    - durationInMinutes: 1
      content: |-
        In this tutorial, you learn all of the steps involved in setting up a virtual machine with the Azure CLI 2.0. You'll
        also learn how to query CLI outputs to get information, re-use created resources when making new VMs, and quickly
        and safely clean up Azure resources.

        This tutorial can be completed with the interactive experienced offered through Azure Cloud Shell, or you may [install the CLI](install-azure-cli.md)
        locally.

        To paste tutorial text into Azure Cloud Shell, use __ctrl-shift-v__ (__cmd-shift-v__ on macOS).

    - durationInMinutes: 1
      title: Log in
      content: |-
        If you're using a local install of the CLI, you need to log in before performing
        any other steps.

        ```azurecli
        az login
        ```

        Follow the steps displayed in your terminal to complete the log in process.

    - durationInMinutes: 1
      title: Create a resource group
      content: |-
        In Azure, all resources are allocated in a resource management group. Resource groups are used for logical
        groupings and to provide a mechanism for tying resources togther. For this tutorial all of the created resources will go into a
        single group named `TutorialResources`.

        ```azurecli
        az group create --name TutorialResources --location eastus
        ```

    - durationInMinutes: 4
      title: Create a virtual machine
      content: |-
        Virtual machines in Azure have a large number of dependencies. The CLI creates these resources for you based on
        the command line arguments you specify.

        Create a new virtual machine running Ubuntu, which uses SSH authentication for login.

        ```azurecli
        az vm create --resource-group TutorialResources \
          --name TutorialVM1 \
          --image UbuntuLTS \
          --generate-ssh-keys \
          --verbose 
        ```

        > [!NOTE]
        > If you have an SSH key named `id_rsa` already available, this key is used for authentication rather than having a new
        > key generated.

        As the VM is created, you see the local values used and Azure resources being created due to the `--verbose` option.
        Once the VM is ready, JSON is returned from the Azure service including the public IP address.

        ```json
        {
          "fqdns": "",
          "id": "...",
          "location": "eastus",
          "macAddress": "...",
          "powerState": "VM running",
          "privateIpAddress": "...",
          "publicIpAddress": <PUBLIC_IP_ADDRESS>,
          "resourceGroup": "TutorialResources",
          "zones": ""
        }
        ```

        Try connecting to the VM over SSH to make sure that it is up and running.

        ```bash
        ssh <PUBLIC_IP_ADDRESS>
        ```

        Go ahead and log out from the VM.

        There are other ways to get this IP address after the VM has started. You can also get other information about the VM itself such as
        what virtual network it's on, if it has assigned FQDNs, and whether or not it is powered on.

    - durationInMinutes: 3
      title: Get VM information with queries
      content: |-
        Now that a VM has been created, detailed information about it can be retrieved. The common command for getting information from a resource is
        `show`.

        ```azurecli
        az vm show --name TutorialVM1 --resource-group TutorialResources
        ```

        You'll see a lot of information, which can be difficult to parse visually. The data returned
        contains details on how to authenticate with the VM, network interfaces it connects to, and the storage that it uses. Most importantly,
        it contains the Azure object IDs for resources that the VM is connected to. Object IDs allow querying these resources directly
        to get more information about the VM's configuration and capabilities. Queries are written in the [JMESPath query language](http://jmespath.org).

        Since it's used to get information about how to connect to the VM, start with getting the network interface controller (NIC) object ID.

        ```azurecli
        az vm show --name TutorialVM1 \
          --resource-group TutorialResources \
          --query 'networkProfile.networkInterfaces[].id' \
          --output tsv
        ```

        There's a lot going on here, just by adding the query. Each part of it references keys in the returned JSON, or is a JMESPath operator.

        * `networkProfile` is a key of the toplevel JSON, which has `networkInterfaces` as a subkey. If a JSON value is a dictionary,
          its keys are referenced from the parent key with the `.` operator.
        * The `networkInterfaces` value is an array, so it is flattened with the `[]` operator. This operator runs the remainder
          of the query on each array element. In this case, it gets the `id` value of every array element.

        The output format `tsv` (tab-separated values) is guaranteed to only include the result data and whitespace consisting of tabs and newlines.
        Since the returned value is a single bare string, it's safe to assign directly to an environment variable.

        Go ahead and assign the NIC object ID to an environment variable now.

        ```bash
        NIC_ID=$(az vm show -n TutorialVM1 -g TutorialResources \
          --query 'networkProfile.networkInterfaces[].id' \
          -o tsv)
        ```

        This example also demonstrates the use of short arguments, which are available for some of the most common arguments passed to
        the CLI. You may use `-g` instead of `--resource-group`, `-n` instead of `--name`, and `-o` instead of `--output`.

    - durationInMinutes: 4
      title: Set environment variables from CLI output
      content: |-
        Now that you have the NIC ID, run `az network nic show` to get its information.

        ```azurecli
        az network nic show --ids $NIC_ID -g TutorialResources
        ```

        This displays a lot of information applicable to the network interface of the VM such as DNS settings, IP information, security settings, and the NIC MAC address. Right now
        the goal is to obtain the public IP address and subnet object IDs. This information can be pulled with a query.

        ```azurecli
        az network nic show --ids $NIC_ID \
          -g TutorialResources \
          --query '{IP:ipConfigurations[].publicIpAddress.id, Subnet:ipConfigurations[].subnet.id}' \
          -o table
        ```

        This displays a JSON object which has custom keys ('IP' and 'Subnet') for the extracted values. While this might not be useful
        for command-line tools, it helps with human readability and could be piped to your own tooling.

        Rather than create a new tool, for now take this output and output it as `tsv`. This can be processed by
        the shell `read` command to load results into multiple variables. Since two values on separate lines are displayed, the `read` command
        delimiter must be set to the empty string rather than the default of non-newline whitespace.

        ```bash
        read -d '' IP_ID SUBNET_ID <<< $(az network nic show \
          --ids $NIC_ID -g TutorialResources \
          --query '[ipConfigurations[].publicIpAddress.id, ipConfigurations[].subnet.id]' \
          -o tsv)
        ```

        You won't use the subnet ID right away, but since it can be obtained in this single query, it's useful to store it for later. For now,
        use the public IP object ID to look up the public IP address and store it in a shell variable.

        ```bash
        VM1_IP_ADDR=$(az network public-ip show --ids $IP_ID \
          -g TutorialResources \
          --query ipAddress \
          -o tsv)
        ```

        Now you have the IP address of the VM stored in a shell variable. Go ahead and check that it is the same value that you used to initially connect to the VM.

        ```bash
        echo $VM1_IP_ADDR
        ```

    - durationInMinutes: 2
      title: Creating a new VM on the existing subnet
      content: |-
        The second VM will use the existing subnet. You can skip a few steps to get the public IP address of the new VM stored into an environment
        variable right away, since it's returned in the VM creation information. If you'd need other information about the VM later, it can always be
        obtained from the `az vm show` command.

        ```bash
        VM2_IP_ADDR=$(az vm create -g TutorialResources \
          -n TutorialVM2 \
          --image UbuntuLTS \
          --generate-ssh-keys \
          --subnet $SUBNET_ID \
          --query publicIpAddress \
          -o tsv)
        ```

        Using the stored IP address, SSH into the newly-created VM.

        ```bash
        ssh $VM2_IP_ADDR
        ```

        Go ahead and log out from the VM.

    - durationInMinutes: 2
      title: Cleanup
      content: |-
        Now that the tutorial is complete, it's time to clean up the created resources. While you
        can delete individual resources with the `delete` command in their group, the safest way to remove all resources
        that have been put together into the same resource group is with `group delete`.

        ```azurecli
        az group delete --name TutorialResources --no-wait
        ```

        This command deletes the resources created during the tutorial, and is guaranteed to deallocate
        them in the correct order. The `--no-wait` parameter keeps the CLI from blocking while the
        deletion takes place. If you decide to wait until the deletion is complete, or want to watch it progress,
        you use the `group wait` command.

        ```azurecli
        az group wait --name TutorialResources --deleted
        ```

        With cleanup completed, the tutorial is finished. Continue on for a summary of everything
        you learned and links to resources that will help you with your next steps.

    - durationInMinutes: 1
      title: Summary
      content: |-
        Congratluations! You learned how to create VMs both with new and existing resources, used the `--query` and `--output` arguments
        to capture data to be stored in shell variables, and looked at some of the resources that get created for Azure VMs.

        Where you go from here depends on what you plan to use the CLI for. We have a variety of materials that go further
        in depth on the features covered in this tutorial.

        ### Samples

        If you want to get started right away doing specific simple tasks, we offer a number of sample scripts.

        * Working with [Linux VMs](/azure/virtual-machines/linux/cli-samples?toc=%2fcli%2fazure%2ftoc.json) and [Windows VMs](/azure/virtual-machines/windows/cli-samples?toc=%2fcli%2fazure%2ftoc.json)
        * Working with [webapps](/azure/app-service/app-service-cli-samples?toc=%2Fcli%2Fazure%2Ftoc.json) and [Azure Functions](/azure/azure-functions/functions-cli-samples?toc=%2fcli%2fazure%2ftoc.json)
        * Working with databases - [Azure SQL databases](/azure/sql-database/sql-database-cli-samples?toc=%2fcli%2fazure%2ftoc.json), [PostgreSQL](/azure/postgresql/sample-scripts-azure-cli?toc=%2fcli%2fazure%2ftoc.json), [MySQL](/azure/mysql/sample-scripts-azure-cli?toc=%2fcli%2fazure%2ftoc.json), and [CosmosDB](/azure/cosmos-db/cli-samples?toc=%2fcli%2fazure%2ftoc.json).

        ### In-depth CLI documentation

        There are also topics that go deeper into the CLI features that were shown in the tutorial.

        * Learn more about [output formats](format-output-azure-cli.md)
        * Learn more about [output queries](query-azure-cli.md)
        * Learn more about [login and authorization](authenticate-azure-cli.md)

        ### Other useful documentation

        You might want to take time to explore more advanced features of the CLI, like [configuring defaults](azure-cli-configuration.md) or [extensions](azure-cli-extensions.md).

        We hope that you enjoy using the Azure CLI!
