#YamlMime: Tutorial
title: Learn how to use the Azure CLI 2.0
metadata:
    title: Learn how to use the Azure CLI 2.0
    description: Get started with the Azure CLI by performing simple tasks.
    audience: IT Pro
    level: Beginner
    displayType: two-column
    interactive: azurecli
items:
    durationInMinutes: 1
    content: >-
        In this tutorial, you will learn how to perform a variety of simple tasks with the Azure CLI 2.0.
        These tasks include things like setting up virtual machines, deploying webapps, uploading data
        to storage, and using the query and output features of the CLI to filter information you need
        out of responses.

        You can use the interactive experience offered as part of this tutorial, or [install the CLI]()
        locally.

    durationInMinutes: 1
    title: Log in
    content: >-
        If you're using a local install of the CLI, you will need to log in before perofrming
        any other steps. If you're using the interactive experience through cloud shell,
        you've already been logged in.

        ```azurecli
        az login
        ```

        Follow the steps displayed in your terminal to complete the log in process.

    durationInMinutes: 1
    title: Create a resource group
    content: >-
        In Azure, resources are tied together in a resource management group to allow them
        to link together. For this tutorial all of the created resources will go into a
        single group.

        ```azurecli
        az group create --name CLITutorial --location eastus
        ```

        > [!NOTE]
        > If you change the location of this resource group, some resources in this
        > tutorial may not be able to be created due to datacenter availability.

    durationInMinutes: 1
    title: Create a virtual machine
    content: >-
        Virtual machines in Azure are complicated resources which have a large number of
        dependencies. Fortunately, the CLI creates these intermediary resources for you
        based on the command line arguments you specify. In this step we're going to
        create a virtual machine, and then get information on some of those created
        resources with `--query` so that they can be used in the creation of additional
        virtual machines.

        ## Create your first virtual machine

        Start by creating a single new virtual machine running Ubuntu which uses SSH authentication for login.

        ```azurecli
        az vm create --resource-group CLITutorial --name TutorialVM1 --image UbuntuLTS --generate-ssh-keys
        ```

        > [!NOTE]
        > If you have an SSH key named `id_rsa` already available, this key is used for authentication rather than having a new
        > key generated.

        Once the VM is created, you will get a small amount of information in your terminal, including the public IP address.
        Try connecting to the VM over SSH to make sure that it is up and running.

        ```bash
        ssh <PUBLIC_IP_ADDRESS>
        ```

        Go ahead and log out from the new VM. There are better ways to get this IP address, and other information about the VM itself -
        what virtual network it's on, if it has assigned FQDNs, and whether or not it is powered on. You'll now learn how to use the
        `--query` command to get that information, and combine it with UNIX command-line tools to extract and save values.

        ## Show and query virtual machine information

        The common command for getting information from a resource is `show`. Go ahead and try it now for the VM that was just created.

        ```azurecli
        az vm show --name TutorialVM1 --resource-group CLITutorial
        ```

        You'll see an overwhelming amount of information, which can be difficult to parse or even scroll through. The information returned
        contains details on authentication with the VM, the network interface it connects to, and the storage that it uses. Most importantly,
        it contains the Azure Object IDs for reosurces that the VM is directly connected to. Since we want to save the public IP address,
        start by getting the NIC object ID so that we can query that.

        ```azurecli
        az vm show --name TutorialVM1 --resource-group CLITutorial --query 'networkProfile.networkInterfaces[].id' --output tsv
        ```

        There's a lot new going on here, just by adding the query.

        * Breaking down the query, it references fields of the JSON output that can be found with visual inspection and
          subsequent queries. `networkProfile` is a key of the toplevel JSON, which has `networkInterfaces` as a subkey.
          Because the value here is an array, it is "flattened" with the `[]` operator, which runs the query strings
          following it on each array element. This extracts the `id` field from each `networkInterfaces` element,
          giving us the object ID that we are looking for.
        * The output format `tsv` is guaranteed to only include the data queried, and whitespace. Since we know there will be
          at most one value returned, this will print _only_ the data.

        Now that we know how to get this value, this command can be executed to store it in a shell variable.

        ```bash
        NIC_ID=`az vm show -n TutorialVM1 -g CLITutorial --query 'networkProfile.networkInterfaces[].id' -o tsv`
        ```

        This example also demonstrates the use of short arguments, which are available for some of the most common arguments passed to
        the CLI.

        Now that we have the NIC ID, we can run `az network nic show` to get the information on the NIC itself.

        ```azurecli
        az network nic show --ids $NIC_ID -g CLITutorial
        ```

        Again, this displays a lot of information - DNS settings, IP information, security settings, MAC address, and so on. Right now
        we're interested in two things: The public IP address and the name of the subnet. Go ahead and pull that information with a query.

        ```azurecli
        az network nic show --ids $NIC_ID -g CLITutorial --query '{IP:ipConfigurations[].publicIpAddress.id, Subnet:ipConfigurations[].subnet.id}'
        ```

        This displays a JSON object which has custom identifiers ('IP' and 'Subnet') for the extracted values. While this might not be useful
        for command-line tools, it helps with human readability and you can take this JSON and pipe it to our own custom scripts or software.

        What we can do, though, is take this output and rather than re-tag it, output it as tab-separated values (TSV). This can be processed by
        the shell `read` command to load results into multiple variables.

        ```bash
        read -d '' IP_ID SUBNET_ID <<< $(az network nic show --ids $NIC_ID -g CLITutorial --query '[ipConfigurations[].publicIpAddress.id, ipConfigurations[].subnet.id]' -o tsv)
        ```

        We won't use the subnet ID right away, but because it can be obtained in this single query, it's useful to store it for later. Instead what we will
        now do is use the IP ID to look up the public IP address object in Azure, and store the IP address in a shell variable.

        ```bash
        read VM1_IP_ADDR <<< $(az network public-ip show --ids $IP_ID -g CLITutorial --query ipAddress -o tsv)
        ```

        Now we've got the IP address of our VM that can easily be connected to. The next step is to create a second VM, on the same subnet, so that
        these VMs can be easily connected and later grouped together.

        ## Creating a VM on the same subnet

    Our second VM is going to be created in a similar way, just with one important difference: We already have a subnet available, and
        want the new VM to reuse it. We can also skip a few steps to get the public IP address of the new VM stored into an environment
        variable right away, since it's returned in the VM creation information.

        ```bash
        VM2_IP_ADDR=$(az vm create --resource-group CLITutorial --name TutorialVM2 --image UbuntuLTS --generate-ssh-keys --subnet $SUBNET_ID --query publicIpAddress -o tsv)
        ```

        You can now SSH into this new VM easily.

        ```bash
        ssh $VM2_IP_ADDR
        ```

        ## Finishing up

        Congratluations! You've learned how to create VMs, use the `--query` and `--output` arguments to capture data to be stored in shell variables, and
        looked into some of the resources that get created as part of the VM construction process. In the next portion of the tutorial, you'll learn
        about webapp deployment and hosting.

    durationInMinutes: 1
    title: Deploy webapps
    content: >-
        In this section you'll learn how to both deploy a webapp from a git repository,
        and as a Docker container.

        ## Deploy a docker container
        
    There are only two things that you need to be able to deploy a Docker container as a web application in Azure: An App Service plan, and 
        your image to deploy. An App Service plan describes what level and type of resources to allocate for running your application. Containers
        are only available for Linux deployment plans.
        
        ```azurecli
        az appservice plan create -g CLITutorial -n TutorialPlan --is-linux
        ```

        For this example, you will deploy a "hello world" application written in Node.js. The most difficult part of deploying a webapp
        is coming up with a unique name. This must resolve to a unique FQDN within the `*.azurewebsites.net` domain, so your application name
        cannot conflict with any existing application names. As a result, you need to provide your own application name by filling in the missing
        value for the `--name` argument.

        ```azurecli
        az webapp create -n ${YOUR_APP_NAME} -g CLITutorial --plan TutorialPlan -i microsoft/aci-helloworld
        ```

        If your name is not unique, you will get an error of "Website with given name ${YOUR_APP_NAME} already exists." Choose a new application
        name and try again. You can also go to `${YOUR_APP_NAME}.azurewebsites.net` and see if it is already registered. Unfortunately,
        there is no way to check through the CLI if a site is already registered - you must use trial and error.

        Once the command succeeds, go to `${YOUR_APP_NAME}.azurewebsites.net`, and you should see the following page displayed.

        [!IMAGE helloworld-image.png](...)

        This FQDN also routes to the possible outbound IP addresses of the web app. If you want to direct your own FQDN to them, you can
        get the outbound IP addresses from `az webapp show`.

        ```azurecli
        FILL IN THE COMMAND HERE LATER, BRO
        ```

        ## Deploy from git repository
        
        Rather than publishing a Docker image, you can also publish directly from a git repository, whether it is local, served off
        github, or maintained on your own git server. The deployment strategy used in this part of the tutorial is _manual deployment_ -
        you choose when to re-deploy from the repository. Web apps also offer automatic deployment, which pushes a branch to the web app
        worker whenever there is an update to it.




    durationInMinutes: 1
    title: Work with Storage
    content: >-
        In this section you'll create a new storage account, and then learn how to upload
        files and blobs to it. You'll also learn how to set up blobs as virtual disks
        to share between VMs.

    durationInMinutes: 1
    title: Use databases
    content: >-
        In this section you'll learn the basics of working with Azure SQL by creating and
        working with tables through the CLI, and then see how to query them with your
        locally available SQL tools.

        

    durationInMinutes: 1
    title: Cleanup
    content: >-
        Now that you've completed the tutorial, it's time to clean up the created resources. While you
        can delete individual resources with the `delete` command from each command group (i.e.
        `storage account delete`, `vm delete`, etc.) the fastest way to remove all resources
        that have been put together into the same resource group is with `group delete`.

        ```azurecli
        az group delete --name CLITutorial --no-wait
        ```

        This command deletes the resources created during the tutorial, and is guaranteed to deallocate
        them in the correct order. The `--no-wait` parameter keeps the CLI from blocking while the
        deletion takes place -- this can take quite a while! If you decide that you want to wait
        until the deletion is complete, or watch it progress, you can always use the `group wait`
        command.
        
        ```azurecli
        az group wait --name CLITutorial --deleted
        ```

        With cleanup completed, the tutorial is completed. Continue on for a summary of everything
        you've learned and links to resources that will help you with your next steps.

    durationInMinutes: 1
    title: Summary
    content: >-
        Congratluations, you've learned the basics of using the Azure CLI to work with Azure
        resources and services! Along the way you've learned the basics of working with
        virtual machines, webapps, and storage. You've also learned some basics of
        the `--output` and `--query` arguments.

        Where you go from here depends on what you plan to use the CLI for. We offer
        a variety of materials that go further in depth on the fatures covered in
        this tutorial.

        ## Samples

        If you want to get started right away with samples that show how to achieve specific
        tasks with the CLI, we offer a number of sample scripts.

        * Working with [Linux VMs]() and [Windows VMs]()
        * Working with [webapps]() and [Azure Functions]()
        * Working with databases - [Azure SQL databases](), [PostgreSQL](), [MySQL](), and [CosmosDB]().

        ## In-depth CLI documentation

        There are also topics that go deeper into the CLI features that were shown
        in the tutorial.
        
        * Learn more about [output formats]()
        * Learn more about [output queries]()
        * Learn more about [login and authorization]()

        ## Other useful documentation
        
        You might also want to take time to explore some more advanced features of
        the CLI, like [configuring defaults]() or [extensions]().

        We hope that you have an enjoyable and useful experience with the Azure CLI!

